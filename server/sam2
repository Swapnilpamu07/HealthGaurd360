import os
import firebase_admin
from firebase_admin import credentials, db
from flask import Flask, send_from_directory, jsonify, request
from flask_cors import CORS
import re
import logging
import dateparser

# Set up logging for debugging
logging.basicConfig(level=logging.DEBUG)

# Initialize Firebase
cred = credentials.Certificate('credentials/firebase-credentials.json')
firebase_admin.initialize_app(cred, {
    "databaseURL": "https://healthgaurd360-426f4-default-rtdb.asia-southeast1.firebasedatabase.app/"
})

app = Flask(__name__, static_folder="../client/build")
CORS(app)  # This enables CORS for all routes

# Reference the root of the database
ref = db.reference('/')

# Command handler with expanded operations
def handle_command(command):
    command = command.lower()

    if re.search(r'\b(add|appointment)\b', command) and not re.search(r'\b(show)\b', command):
        return add_appointment_command(command)
    elif re.search(r'\b(list|show)\b.*\b(hospitals)\b', command):
        match = re.search(r'\b(list|show)\b\s*(\d*)\b.*\b(hospitals)\b', command)
        count = match.group(2) if match.group(2) else "5"
        return show_nearby_hospitals_command(int(count))
    elif re.search(r'what disease starts with (\w)', command):
        match = re.search(r'what disease starts with (\w)', command)
        letter = match.group(1).upper()
        return show_disease_by_letter_command(letter)
    elif re.search(r'\b(my patients|show patients)\b', command):
        return show_my_patients_command(444)
    elif re.search(r'\b(available doctors|doctors)\b', command):
        return show_available_doctors_command()
    elif re.search(r'\b(show|my)\b.*\b(appointments)\b.*\b(patient)\b.*\b(id)\b\s*(\S+)', command):
        match = re.search(r'\b(show|my)\b.*\b(appointments)\b.*\b(patient)\b.*\b(id)\b\s*(\S+)', command)
        if match:
                patient_id = "-O6Js3xVm1T3FoxFTjdZ"
                return show_my_appointments_command(patient_id)
        else:
                return "Please specify a patient ID. Example: 'show appointments for patient id 456'"
    elif re.search(r'\b(heart rate|blood oxygen|sensor data)\b', command):
        return show_sensor_data_command()
    elif re.search(r'\b(news|health news)\b', command):
        return show_health_news_command()
    elif re.search(r'\b(user|patient) info\b', command):
        return show_user_info_command()
    elif re.search(r'\b(disease|condition) info\b', command):
        return show_disease_info_command(command)
    elif re.search(r'\b(hospital|clinic) info\b', command):
        return show_hospital_info_command()
    else:
        return "I'm sorry, I don't understand that command. Can you please rephrase or ask something else?"

@app.route("/api/store_ids", methods=["GET"])
def store_ids():
    patient_id = request.args.get('patient_id')
    doctor_id = request.args.get('doctor_id')

    # Check if at least one ID is provided
    if not patient_id and not doctor_id:
        return jsonify({"message": "At least one of patient ID or doctor ID must be provided"}), 400

    ids_ref = ref.child('ids')
    current_ids = ids_ref.get() or {}

    # Update the IDs only if they are provided
    if patient_id:
        current_ids['patient_id'] = patient_id
    if doctor_id:
        current_ids['doctor_id'] = doctor_id

    ids_ref.set(current_ids)

    return jsonify({"message": "IDs stored successfully", "stored_ids": current_ids}), 200


def add_appointment_command(command):
    # Extract information from the command
    doctor_id = "123"
    patient_id = "456"
    appointment_time = "10:00 AM"
    
    # Extract date information
    date_match = re.search(r'\bat\s*(.*)\b', command)
    appointment_date = dateparser.parse(date_match.group(1)) if date_match else dateparser.parse("next week")
    
    if not appointment_date:
        return "Could not understand the date. Please specify a valid date."

    # Extract age and gender
    age_match = re.search(r'\bage\s*(\d{1,2})\b', command)
    gender_match = re.search(r'\b(male|female|other)\b', command)
    age = age_match.group(1) if age_match else "Unknown"
    gender = gender_match.group(1) if gender_match else "Unknown"

    # Prepare appointment data
    appointment_data = {
        "doctor_id": doctor_id,
        "patient_id": patient_id,
        "date": appointment_date.strftime('%Y-%m-%d'),
        "time": appointment_time,
        "age": age,
        "gender": gender,
    }

    appointments_ref = ref.child('appointments')
    new_appointment_ref = appointments_ref.push(appointment_data)
    
    return f"Appointment added successfully for {appointment_date.strftime('%A, %Y-%m-%d')}. Age: {age}, Gender: {gender}."


def show_my_patients_command(doctor_id):
    logging.debug(f"Starting show_my_patients_command for Doctor ID: {doctor_id}")
    appointments_ref = ref.child('appointments')
    appointments = appointments_ref.order_by_child('doctor_id').equal_to(doctor_id).get()
    
    if appointments:
        phrases = []
        for appointment_id, appointment_data in appointments.items():
            patient_id = appointment_data['patient_id']
            user_ref = ref.child('users').child(patient_id)
            patient_data = user_ref.get()
            
            if patient_data:
                patient_name = patient_data.get('name', 'Unknown Name')
                patient_gender = patient_data.get('gender', 'Unknown Gender')
                patient_age = appointment_data.get('age', 'Unknown Age')
                appointment_time = appointment_data.get('time', 'Unknown Time')
                appointment_date = appointment_data.get('date', 'Unknown Date')
                
                phrase = (f"{len(phrases) + 1}st patient {patient_name} is {patient_gender}, "
                          f"has booked an appointment at {appointment_time} on {appointment_date}, "
                          f"and their age is {patient_age}.")
                
                phrases.append(phrase)
        
        logging.debug(f"Appointments and patient details found: {phrases}")
        return " ".join(phrases)
    else:
        logging.debug(f"No appointments found for Doctor ID: {doctor_id}")
        return f"No appointments found for Doctor ID: {doctor_id}"

def show_nearby_hospitals_command(count):
    logging.debug(f"Fetching list of {count} nearby hospitals")
    # Assuming hospitals data is stored in Firebase under 'hospitals'
    hospitals_ref = ref.child('hospitals')
    hospitals = hospitals_ref.order_by_key().limit_to_first(count).get()
    
    if hospitals:
        phrases = []
        for idx, (hospital_id, hospital_data) in enumerate(hospitals.items()):
            hospital_name = hospital_data.get('name', 'Unknown Hospital')
            hospital_address = hospital_data.get('address', 'No address provided')
            phrases.append(f"{idx + 1}. {hospital_name} located at {hospital_address}.")
        
        return "Here are the nearest hospitals: " + " ".join(phrases)
    else:
        return "No hospitals found in your vicinity."

def show_disease_by_letter_command(letter):
    logging.debug(f"Fetching diseases that start with the letter {letter}")
    # Assuming disease data is stored in Firebase under 'diseases'
    diseases_ref = ref.child('diseases')
    diseases = diseases_ref.order_by_child('name').start_at(letter).end_at(letter + "\uf8ff").get()
    
    if diseases:
        disease_list = [disease_data['name'] for disease_id, disease_data in diseases.items()]
        return f"Diseases that start with {letter}: " + ", ".join(disease_list)
    else:
        return f"No diseases found that start with the letter {letter}."

def show_available_doctors_command():
    logging.debug("Fetching list of available doctors")
    # Assuming doctors data is stored in Firebase under 'doctors'
    doctors_ref = ref.child('doctors')
    doctors = doctors_ref.order_by_child('available').equal_to(True).get()
    
    if doctors:
        doctor_list = [f"Dr. {doctor_data['name']} ({doctor_data.get('specialty', 'General')})" 
                       for doctor_id, doctor_data in doctors.items()]
        return "Here are the available doctors: " + ", ".join(doctor_list)
    else:
        return "No available doctors at the moment."

def show_my_appointments_command(patient_id):
    logging.debug(f"Fetching appointments for patient ID: {patient_id}")
    appointments_ref = ref.child('appointments')
    appointments = appointments_ref.order_by_child('patient_id').equal_to(patient_id).get()
    
    if appointments:
        phrases = []
        for idx, (appointment_id, appointment_data) in enumerate(appointments.items()):
            doctor_id = appointment_data.get('doctor_id', 'Unknown Doctor')
            appointment_time = appointment_data.get('time', 'Unknown Time')
            appointment_date = appointment_data.get('date', 'Unknown Date')
            
            # Fetch doctor's name
            doctor_ref = ref.child('users').child(doctor_id)
            doctor_data = doctor_ref.get()
            doctor_name = doctor_data.get('name', 'Unknown Doctor') if doctor_data else 'Unknown Doctor'
            
            phrases.append(f"Appointment {idx + 1} with Dr. {doctor_name} is scheduled at {appointment_time} on {appointment_date}.")
        
        return "Here are your appointments: " + " ".join(phrases)
    else:
        return f"No appointments found for patient ID {patient_id}."

def show_sensor_data_command():
    logging.debug("Fetching sensor data for patient") 
    patient_id = "-O6Js3xVm1T3FoxFTjdZ"  # Simulated patient ID
    
    # Assuming sensor data is stored under 'sensor_data' in Firebase
    sensor_data_ref = ref.child('sensor_data').child(patient_id)
    sensor_data = sensor_data_ref.get()
    
    if sensor_data:
        heart_rate = sensor_data.get('heart_rate', 'N/A')
        blood_oxygen = sensor_data.get('blood_oxygen', 'N/A')
        temperature = sensor_data.get('temperature', 'N/A')
        
        return (f"Sensor data for patient {patient_id}: Heart Rate: {heart_rate} bpm, "
                f"Blood Oxygen: {blood_oxygen}%, Temperature: {temperature}°C.")
    else:
        return "No sensor data found for the given patient ID."

def show_health_news_command():
    logging.debug("Fetching latest health news")
    news_ref = ref.child('news')
    news = news_ref.order_by_child('date').limit_to_last(5).get()
    
    if news:
        phrases = []
        for idx, (news_id, news_data) in enumerate(news.items()):
            title = news_data.get('title', 'No title')
            source = news_data.get('source', 'Unknown source')
            phrases.append(f"{idx + 1}. {title} from {source}.")
        
        return "Here are the latest health news articles: " + " ".join(phrases)
    else:
        return "No recent health news available."

def show_user_info_command():
    logging.debug("Fetching user info")
    user_id = "-O6Js3xVm1T3FoxFTjdZ"  # Simulated user ID
    
    # Assuming user info is stored under 'users' in Firebase
    users_ref = ref.child('users')
    user_info = users_ref.child(user_id).get()
    
    if user_info:
        if 'password' in user_info:
            del user_info['password']  # Removing sensitive data
        
        name = user_info.get('name', 'Unknown Name')
        age = user_info.get('age', 'N/A')
        gender = user_info.get('gender', 'N/A')
        email = user_info.get('email', 'N/A')
        
        return (f"User Information: Name: {name}, Age: {age}, Gender: {gender}, "
                f"Email: {email}.")
    else:
        return "User information not found."

def show_disease_info_command(command):
    logging.debug(f"Fetching disease info based on the command: {command}")
    diseases_ref = ref.child('diseases')
    diseases = diseases_ref.get()
    
    for disease_id, disease_info in diseases.items():
        if disease_info['name'].lower() in command:
            description = disease_info.get('description', 'No description available')
            symptoms = disease_info.get('symptoms', 'No symptoms listed')
            return f"Disease: {disease_info['name']}. Description: {description}. Symptoms: {symptoms}."
    
    return "Disease information not found. Please specify a disease name."

def show_hospital_info_command():
    logging.debug("Fetching hospital information")
    hospitals_ref = ref.child('hospitals')
    hospitals = hospitals_ref.get()
    
    if hospitals:
        phrases = []
        for idx, (hospital_id, hospital_data) in enumerate(hospitals.items()):
            hospital_name = hospital_data.get('name', 'Unknown Hospital')
            address = hospital_data.get('address', 'No address provided')
            phrases.append(f"{idx + 1}. {hospital_name} located at {address}.")
        
        return "Here is the information about hospitals: " + " ".join(phrases)
    else:
        return "No hospital information available."

@app.route("/api/bot", methods=["GET"])
def bot_api():
    logging.debug("API request received with data: %s", request.args)
    command = request.args.get("command", "")
    
    if not command:
        return jsonify({"message": "Command not provided"}), 400
    
    response = handle_command(command)
    
    if isinstance(response, list):
        return jsonify({"message": " ".join(response)})
    return jsonify({"message": response})


# Serve React client
@app.route("/", defaults={"path": ""})
@app.route("/<path:path>")
def serve(path):
    if path != "" and os.path.exists(app.static_folder + "/" + path):
        return send_from_directory(app.static_folder, path)
    else:
        return send_from_directory(app.static_folder, "index.html")


if __name__ == "__main__":
    app.run(port=5000, debug=True)

